// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dkron.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	dkron.proto

It has these top-level messages:
	GetJobRequest
	GetJobResponse
	ExecutionDoneRequest
	ExecutionDoneResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type GetJobRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
}

func (m *GetJobRequest) Reset()                    { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()               {}
func (*GetJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type GetJobResponse struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timezone             string            `protobuf:"bytes,2,opt,name=timezone" json:"timezone,omitempty"`
	Schedule             string            `protobuf:"bytes,3,opt,name=schedule" json:"schedule,omitempty"`
	Shell                bool              `protobuf:"varint,4,opt,name=shell" json:"shell,omitempty"`
	Command              string            `protobuf:"bytes,5,opt,name=command" json:"command,omitempty"`
	EnvironmentVariables []string          `protobuf:"bytes,6,rep,name=environment_variables,json=environmentVariables" json:"environment_variables,omitempty"`
	Owner                string            `protobuf:"bytes,7,opt,name=owner" json:"owner,omitempty"`
	OwnerEmail           string            `protobuf:"bytes,8,opt,name=owner_email,json=ownerEmail" json:"owner_email,omitempty"`
	SuccessCount         int32             `protobuf:"varint,9,opt,name=success_count,json=successCount" json:"success_count,omitempty"`
	ErrorCount           int32             `protobuf:"varint,10,opt,name=error_count,json=errorCount" json:"error_count,omitempty"`
	Disabled             bool              `protobuf:"varint,11,opt,name=disabled" json:"disabled,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Retries              uint32            `protobuf:"varint,13,opt,name=retries" json:"retries,omitempty"`
	DependentJobs        []string          `protobuf:"bytes,14,rep,name=dependent_jobs,json=dependentJobs" json:"dependent_jobs,omitempty"`
	ParentJob            string            `protobuf:"bytes,15,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Concurrency          string            `protobuf:"bytes,16,opt,name=concurrency" json:"concurrency,omitempty"`
	Executor             string            `protobuf:"bytes,17,opt,name=executor" json:"executor,omitempty"`
	ExecutorConfig       map[string]string `protobuf:"bytes,18,rep,name=executor_config,json=executorConfig" json:"executor_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status               string            `protobuf:"bytes,19,opt,name=status" json:"status,omitempty"`
}

func (m *GetJobResponse) Reset()                    { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()               {}
func (*GetJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetJobResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetJobResponse) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *GetJobResponse) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *GetJobResponse) GetShell() bool {
	if m != nil {
		return m.Shell
	}
	return false
}

func (m *GetJobResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GetJobResponse) GetEnvironmentVariables() []string {
	if m != nil {
		return m.EnvironmentVariables
	}
	return nil
}

func (m *GetJobResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GetJobResponse) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *GetJobResponse) GetSuccessCount() int32 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *GetJobResponse) GetErrorCount() int32 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *GetJobResponse) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *GetJobResponse) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetJobResponse) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *GetJobResponse) GetDependentJobs() []string {
	if m != nil {
		return m.DependentJobs
	}
	return nil
}

func (m *GetJobResponse) GetParentJob() string {
	if m != nil {
		return m.ParentJob
	}
	return ""
}

func (m *GetJobResponse) GetConcurrency() string {
	if m != nil {
		return m.Concurrency
	}
	return ""
}

func (m *GetJobResponse) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *GetJobResponse) GetExecutorConfig() map[string]string {
	if m != nil {
		return m.ExecutorConfig
	}
	return nil
}

func (m *GetJobResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ExecutionDoneRequest struct {
	JobName    string                     `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	Success    bool                       `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Output     []byte                     `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	NodeName   string                     `protobuf:"bytes,4,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	Group      int64                      `protobuf:"varint,5,opt,name=group" json:"group,omitempty"`
	Attempt    uint32                     `protobuf:"varint,6,opt,name=attempt" json:"attempt,omitempty"`
	StartedAt  *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	FinishedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
}

func (m *ExecutionDoneRequest) Reset()                    { *m = ExecutionDoneRequest{} }
func (m *ExecutionDoneRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExecutionDoneRequest) ProtoMessage()               {}
func (*ExecutionDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecutionDoneRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ExecutionDoneRequest) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ExecutionDoneRequest) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecutionDoneRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ExecutionDoneRequest) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *ExecutionDoneRequest) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *ExecutionDoneRequest) GetStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *ExecutionDoneRequest) GetFinishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

type ExecutionDoneResponse struct {
	From    string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ExecutionDoneResponse) Reset()                    { *m = ExecutionDoneResponse{} }
func (m *ExecutionDoneResponse) String() string            { return proto1.CompactTextString(m) }
func (*ExecutionDoneResponse) ProtoMessage()               {}
func (*ExecutionDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecutionDoneResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ExecutionDoneResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto1.RegisterType((*GetJobRequest)(nil), "proto.GetJobRequest")
	proto1.RegisterType((*GetJobResponse)(nil), "proto.GetJobResponse")
	proto1.RegisterType((*ExecutionDoneRequest)(nil), "proto.ExecutionDoneRequest")
	proto1.RegisterType((*ExecutionDoneResponse)(nil), "proto.ExecutionDoneResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dkron service

type DkronClient interface {
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error)
}

type dkronClient struct {
	cc *grpc.ClientConn
}

func NewDkronClient(cc *grpc.ClientConn) DkronClient {
	return &dkronClient{cc}
}

func (c *dkronClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := grpc.Invoke(ctx, "/proto.Dkron/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dkronClient) ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error) {
	out := new(ExecutionDoneResponse)
	err := grpc.Invoke(ctx, "/proto.Dkron/ExecutionDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dkron service

type DkronServer interface {
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	ExecutionDone(context.Context, *ExecutionDoneRequest) (*ExecutionDoneResponse, error)
}

func RegisterDkronServer(s *grpc.Server, srv DkronServer) {
	s.RegisterService(&_Dkron_serviceDesc, srv)
}

func _Dkron_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkronServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dkron/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkronServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dkron_ExecutionDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkronServer).ExecutionDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dkron/ExecutionDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkronServer).ExecutionDone(ctx, req.(*ExecutionDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dkron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dkron",
	HandlerType: (*DkronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Dkron_GetJob_Handler,
		},
		{
			MethodName: "ExecutionDone",
			Handler:    _Dkron_ExecutionDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkron.proto",
}

func init() { proto1.RegisterFile("dkron.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x85, 0xe3, 0x47, 0xec, 0x91, 0xed, 0xe4, 0x32, 0xce, 0x05, 0xaf, 0x72, 0x8b, 0x08, 0x2e,
	0x0a, 0xb8, 0x5d, 0x38, 0x40, 0x82, 0xa2, 0xaf, 0x55, 0x90, 0x18, 0x05, 0xbc, 0xe8, 0x42, 0x08,
	0xba, 0x35, 0x28, 0x69, 0xec, 0x28, 0x91, 0x48, 0x95, 0xa4, 0xd2, 0xba, 0x9f, 0xd0, 0x7d, 0xff,
	0xa1, 0x9f, 0x59, 0x90, 0x94, 0xdc, 0x24, 0x30, 0x10, 0x74, 0x25, 0x9e, 0x33, 0x47, 0x33, 0x9c,
	0x07, 0x07, 0xbc, 0xe4, 0x56, 0x0a, 0x3e, 0x2d, 0xa4, 0xd0, 0x82, 0xb4, 0xed, 0xc7, 0x3f, 0x5e,
	0x09, 0xb1, 0xca, 0xf0, 0xc4, 0xa2, 0xa8, 0x5c, 0x9e, 0xe8, 0x34, 0x47, 0xa5, 0x59, 0x5e, 0x38,
	0xdd, 0xf8, 0x15, 0x0c, 0x3e, 0xa2, 0x9e, 0x8b, 0x28, 0xc4, 0x2f, 0x25, 0x2a, 0x4d, 0xfe, 0x83,
	0xee, 0x8d, 0x88, 0x16, 0x9c, 0xe5, 0x48, 0x1b, 0x41, 0x63, 0xd2, 0x0b, 0x77, 0x6f, 0x44, 0xf4,
	0x89, 0xe5, 0x38, 0xfe, 0xd9, 0x81, 0x61, 0x2d, 0x56, 0x85, 0xe0, 0x0a, 0x09, 0x81, 0xd6, 0x3d,
	0xa5, 0x3d, 0x13, 0x1f, 0xba, 0x26, 0xca, 0x77, 0xc1, 0x91, 0xee, 0x58, 0x7e, 0x83, 0x8d, 0x4d,
	0xc5, 0xd7, 0x98, 0x94, 0x19, 0xd2, 0xa6, 0xb3, 0xd5, 0x98, 0x8c, 0xa0, 0xad, 0xae, 0x31, 0xcb,
	0x68, 0x2b, 0x68, 0x4c, 0xba, 0xa1, 0x03, 0x84, 0xc2, 0x6e, 0x2c, 0xf2, 0x9c, 0xf1, 0x84, 0xb6,
	0xdd, 0x75, 0x2a, 0x48, 0xce, 0xe0, 0x10, 0xf9, 0x5d, 0x2a, 0x05, 0xcf, 0x91, 0xeb, 0xc5, 0x1d,
	0x93, 0x29, 0x8b, 0x32, 0x54, 0xb4, 0x13, 0x34, 0x27, 0xbd, 0x70, 0x74, 0xcf, 0xf8, 0xb9, 0xb6,
	0x99, 0x20, 0xe2, 0x2b, 0x47, 0x49, 0x77, 0xad, 0x33, 0x07, 0xc8, 0x31, 0x78, 0xf6, 0xb0, 0xc0,
	0x9c, 0xa5, 0x19, 0xed, 0x5a, 0x1b, 0x58, 0x6a, 0x66, 0x18, 0xf2, 0x1c, 0x06, 0xaa, 0x8c, 0x63,
	0x54, 0x6a, 0x11, 0x8b, 0x92, 0x6b, 0xda, 0x0b, 0x1a, 0x93, 0x76, 0xd8, 0xaf, 0xc8, 0x0b, 0xc3,
	0x19, 0x2f, 0x28, 0xa5, 0x90, 0x95, 0x04, 0xac, 0x04, 0x2c, 0xe5, 0x04, 0x3e, 0x74, 0x93, 0x54,
	0x99, 0x8b, 0x24, 0xd4, 0xb3, 0x49, 0x6e, 0x30, 0x39, 0x83, 0x96, 0x66, 0x2b, 0x45, 0xfb, 0x41,
	0x73, 0xe2, 0x9d, 0x1e, 0xbb, 0xf6, 0x4c, 0x1f, 0x96, 0x7b, 0x7a, 0xc5, 0x56, 0x6a, 0xc6, 0xb5,
	0x5c, 0x87, 0x56, 0x6c, 0x8a, 0x23, 0x51, 0xcb, 0x14, 0x15, 0x1d, 0x04, 0x8d, 0xc9, 0x20, 0xac,
	0x21, 0x79, 0x01, 0xc3, 0x04, 0x0b, 0xe4, 0x89, 0x29, 0xcd, 0x8d, 0x88, 0x14, 0x1d, 0xda, 0xaa,
	0x0c, 0x36, 0xec, 0x5c, 0x44, 0x8a, 0x3c, 0x03, 0x28, 0x98, 0xac, 0x34, 0x74, 0xcf, 0xe6, 0xdd,
	0x73, 0xcc, 0x5c, 0x44, 0x24, 0x00, 0x2f, 0x16, 0x3c, 0x2e, 0xa5, 0x44, 0x1e, 0xaf, 0xe9, 0xbe,
	0xb5, 0xdf, 0xa7, 0x4c, 0x4a, 0xf8, 0x0d, 0xe3, 0x52, 0x0b, 0x49, 0xff, 0x71, 0x0d, 0xad, 0x31,
	0x09, 0x61, 0xaf, 0x3e, 0x2f, 0x62, 0xc1, 0x97, 0xe9, 0x8a, 0x12, 0x9b, 0xdd, 0xcb, 0xed, 0xd9,
	0xcd, 0x2a, 0xf1, 0x85, 0xd5, 0xba, 0x3c, 0x87, 0xf8, 0x80, 0x24, 0xff, 0x42, 0x47, 0x69, 0xa6,
	0x4b, 0x45, 0x0f, 0x6c, 0xb4, 0x0a, 0xf9, 0x6f, 0xa0, 0xb7, 0x29, 0x0e, 0xd9, 0x87, 0xe6, 0x2d,
	0xae, 0xab, 0xa1, 0x34, 0x47, 0xd3, 0xf6, 0x3b, 0x96, 0x95, 0xf5, 0x40, 0x3a, 0xf0, 0x7e, 0xe7,
	0x6d, 0xc3, 0x3f, 0x87, 0x83, 0x2d, 0x71, 0xff, 0xc6, 0xc5, 0xf8, 0xd7, 0x0e, 0x8c, 0x9c, 0x8f,
	0x54, 0xf0, 0x4b, 0xc1, 0xf1, 0xe9, 0xb7, 0x64, 0x3a, 0x57, 0xcd, 0x8e, 0xf5, 0xd7, 0x0d, 0x6b,
	0x68, 0x32, 0x14, 0xa5, 0x2e, 0x4a, 0x6d, 0x1f, 0x48, 0x3f, 0xac, 0x10, 0x39, 0x82, 0x1e, 0x17,
	0x09, 0x3a, 0x6f, 0x2d, 0x57, 0x6a, 0x43, 0x58, 0x77, 0x23, 0x68, 0xaf, 0xa4, 0x28, 0x0b, 0xfb,
	0x46, 0x9a, 0xa1, 0x03, 0x26, 0x08, 0xd3, 0x1a, 0xf3, 0x42, 0xd3, 0x8e, 0x1b, 0x8f, 0x0a, 0x92,
	0x77, 0x00, 0x4a, 0x33, 0xa9, 0x31, 0x59, 0x30, 0x6d, 0xdf, 0x82, 0x77, 0xea, 0x4f, 0xdd, 0xb2,
	0x98, 0xd6, 0xcb, 0x62, 0x7a, 0x55, 0x2f, 0x8b, 0xb0, 0x57, 0xa9, 0xcf, 0x35, 0xf9, 0x00, 0xde,
	0x32, 0xe5, 0xa9, 0xba, 0x76, 0xff, 0x76, 0x9f, 0xfc, 0x17, 0x6a, 0xf9, 0xb9, 0x1e, 0xcf, 0xe0,
	0xf0, 0x51, 0xa5, 0xfe, 0x2c, 0x92, 0xa5, 0x14, 0x79, 0xbd, 0x48, 0xcc, 0xd9, 0x5c, 0xbf, 0x60,
	0xeb, 0x4c, 0xb0, 0xc4, 0xd6, 0xa8, 0x1f, 0xd6, 0xf0, 0xf4, 0x47, 0x03, 0xda, 0x97, 0x66, 0xdb,
	0x91, 0xd7, 0xd0, 0x71, 0x53, 0x44, 0x46, 0x8f, 0x86, 0xca, 0xb6, 0xc0, 0x3f, 0xdc, 0x3a, 0x6a,
	0x64, 0x0e, 0x83, 0x07, 0xf7, 0x20, 0x47, 0x95, 0x6e, 0x5b, 0x1f, 0xfd, 0xff, 0xb7, 0x1b, 0x9d,
	0xaf, 0xa8, 0x63, 0x8d, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x1c, 0x7c, 0x3c, 0x80,
	0x05, 0x00, 0x00,
}
